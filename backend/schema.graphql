type User {
  id: ID!
  email: String!
  firstname: String!
  lastname: String!
  phone: String
  siteAdmin: Boolean!
  hasOrganizations: Boolean!
}

type Organization {
  id: ID!
  name: String!
  email: String!
  phone: String
  jobs: [Job]!
  employees: [User]!
  approved: Boolean!
}

type Job {
  id: ID!
  title: String!
  description: String!
  organization: Organization!
  applied: Boolean!
}

type JobConnection {
  nodes: [Job!]!
  pageInfo: JobPageInfo!
  totalCount: Int!
}

type JobPageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type JobApplication {
  id: ID!
  state: JobApplicationState!
  user: User!
  job: Job!
}

enum JobApplicationState {
  PENDING
  REJECTED
  APPROVED
}

type Role {
  id: ID!
  title: String!
  description: String!
}

input CreateJobInput {
  title: String!
  description: String = ""
  organization: ID!
}

type Mutation {
  login(email: String!, pw: String!): Boolean!
  logout: Boolean!

  createJob(input: CreateJobInput!): Job!
  updateJob(id: ID!, title: String, description: String): Job!
  deleteJob(job: ID!): Boolean!

  addBookmark(jobId: String!): Boolean!
  removeBookmark(jobId: String!): Boolean!

  applyForJob(jobId: String!): Boolean!
  approveJobApplication(applicationId: String!): Boolean!
  rejectJobApplication(applicationId: String!): Boolean!

  createOrganization(name: String!): Organization!
  deleteOrganization(organizationId: String!): Boolean!
  approveOrganization(organizationId: String!): Boolean!

  createRole(title: String!, description: String!): Role!

}

type Query {
  jobs(first: Int, last: Int, before: String, after: String): JobConnection!

  organizations: [Organization!]!

  me: User!

  applications(applicationId: String): [JobApplication]!

  roles(id: String, title: String): [Role]!

  # Only *site admins* can access this field. 
  users(onlyAdmins: Boolean, id: String): [User!]!
}
